name: Python CI

on:
  push:
    branches: [ master, ci-test*]
    paths-ignore:
      - 'tests/Auto-GPT-test-cassettes'
      - 'tests/integration/challenges/current_score.json'
  pull_request_target:
    branches: [ master, stable , ci-test*]

concurrency:
  group: ${{ format('ci-{0}', github.head_ref && format('pr-{0}', github.event.pull_request.number) || github.sha) }}
  cancel-in-progress: ${{ github.event_name == 'pull_request_target' }}

jobs:
  lint:
    runs-on: ubuntu-latest
    env:
      min-python-version: "3.10"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}

      - name: Set up Python ${{ env.min-python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.min-python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint with flake8
        run: flake8

      - name: Check black formatting
        run: black . --check
        if: success() || failure()

      - name: Check isort formatting
        run: isort . --check
        if: success() || failure()

      - name: Check mypy formatting
        run: mypy
        if: success() || failure()

      - name: Check for unused imports and pass statements
        run: |
          cmd="autoflake --remove-all-unused-imports --recursive --ignore-init-module-imports autogpt tests"
          $cmd --check || (echo "You have unused imports or pass statements, please run '${cmd} --in-place'" && exit 1)

  test:
    permissions:
      # Gives the action the necessary permissions for publishing new
      # comments in pull requests.
      pull-requests: write
      # Gives the action the necessary permissions for pushing data to the
      # python-coverage-comment-action branch, and for editing existing
      # comments (to avoid publishing multiple comments in the same PR)
      contents: write
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        python-version: ["3.10"]

    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          submodules: true
          token: ${{ secrets.PAT_REVIEW }}

      - name: Use cassettes previously sent [PR event only]
        if: ${{ github.event_name == 'pull_request_target' }}
        run: |
          mirror_branch_submodule="${{ github.event.pull_request.user.login }}-${{ github.event.pull_request.head.ref }}"
          echo "MIRROR_BRANCH_SUBMODULE=$mirror_branch_submodule" >> $GITHUB_ENV
          git config --global user.name "Github Actions"
          git config --global user.email "github-actions@github.com"
          cd tests/Auto-GPT-test-cassettes

          if git ls-remote --exit-code --heads origin ${{ env.MIRROR_BRANCH_SUBMODULE}} ; then
            git fetch origin ${{ env.MIRROR_BRANCH_SUBMODULE}}:${{ env.MIRROR_BRANCH_SUBMODULE}}
            git fetch origin ${{ github.event.pull_request.base.ref }}:${{ github.event.pull_request.base.ref }}

            git checkout ${{ env.MIRROR_BRANCH_SUBMODULE}}

            if git merge --no-commit --no-ff ${{ github.event.pull_request.base.ref }}; then
              echo "No merge conflict detected. We can use the cassettes previously sent."
            else
              echo "Merge conflict detected. This means we cannot use the cassettes previously sent, so we will take the cassettes of ${{ github.event.pull_request.base.ref }}."
              git merge --abort
              git checkout ${{ github.event.pull_request.base.ref }}
            fi
          else
            echo "Branch ${{ env.MIRROR_BRANCH_SUBMODULE}} does not exist. We will use the cassettes of ${{ github.event.pull_request.base.ref }}"
          fi

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run pytest tests with coverage
        run: |
          pytest tests/integration/challenges/basic_abilities/test_write_file.py
          python tests/integration/challenges/utils/build_current_score.py
        env:
          CI: true
          PROXY: ${{ secrets.PROXY }}
          AGENT_MODE: ${{ vars.AGENT_MODE }}
          AGENT_TYPE: ${{ vars.AGENT_TYPE }}

      - name: Update cassette submodule to push target [Push event only]
        if: ${{ github.event_name == 'push' }}
        run: |
          current_branch=$(echo ${{ github.ref }} | sed -e "s/refs\/heads\///g")
          git config --global user.name "Auto-GPT-Bot"
          git config --global user.email "github-bot@agpt.co"

          if ! git diff --quiet -- tests/integration/challenges/current_score.json; then
            git add tests/integration/challenges/current_score.json
            git commit -m "Update current score"
            git push origin HEAD:refs/heads/$current_branch
          else
            echo "The current score didn't change."
          fi

          cd tests/Auto-GPT-test-cassettes
          git fetch origin $current_branch

          # Check if there are any changes
          if ! git diff --quiet; then
            git add .
            git commit -m "Auto-update cassettes after Push event"
            git pull --rebase origin $current_branch

            git push origin HEAD:refs/heads/$current_branch

            cd ../..
            git add tests/Auto-GPT-test-cassettes
            git commit -m "Update submodule reference"
            git push origin HEAD:refs/heads/$current_branch
          else
            echo "No cassettes changes to commit"
          fi

      - name: Identify differences between cassettes of current PR and target branch [PR event only]
        if: ${{ github.event_name == 'pull_request_target' }}
        run: |
          cassettes_modified=$(git diff --name-only --diff-filter=M -- tests/Auto-GPT-test-cassettes)

          if [ -n "$cassettes_modified" ]; then
            echo "CASSETTES_MODIFIED=true" >> $GITHUB_ENV
            echo "Cassettes were modified"
          else
            echo "CASSETTES_MODIFIED=false" >> $GITHUB_ENV
            echo "Cassettes were not modified"
          fi

      - name: Attempt to beat Challenges if cassettes changed [PR event only]
        if: ${{ env.CASSETTES_MODIFIED == 'true' }}
        run: |
          pytest -n auto tests/integration/challenges/memory/test_memory_challenge_c.py tests/integration/challenges/basic_abilities/test_write_file.py --beat-challenges --cov=autogpt --cov-report term-missing --cov-branch --cov-report xml --cov-report term
          python tests/integration/challenges/utils/build_current_score.py
        env:
          CI: true
          PROXY: ${{ secrets.PROXY }}
          AGENT_MODE: ${{ vars.AGENT_MODE }}
          AGENT_TYPE: ${{ vars.AGENT_TYPE }}

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3

      - name: Update cassette submodule to a mirror branch [PR event only]
        if: ${{ env.CASSETTES_MODIFIED == 'true' }}
        run: |
          cd tests/Auto-GPT-test-cassettes
          git config --global user.name "Auto-GPT-Bot"
          git config --global user.email "github-bot@agpt.co"

          # Check if there are any changes
          if ! git diff --quiet; then
            git add .
            git commit -m "Auto-update cassettes after merging PR #${{ github.event.pull_request.number }}"
            git push -f origin HEAD:refs/heads/${{ env.MIRROR_BRANCH_SUBMODULE}}
          else
            echo "No changes to commit"
            exit 0
          fi

      - name: Create Pull Request to update the score [PR event only]
        if: ${{ github.event_name == 'pull_request_target' }}
        run: |
          current_date_time=$(date +'%Y%m%d%H%M%S')
          current_score_branch="update-score-${{ github.event.pull_request.number }}-$current_date_time"

          git config --global user.name "Auto-GPT-Bot"
          git config --global user.email "github-bot@agpt.co"

          if ! git diff --quiet -- tests/integration/challenges/current_score.json; then
            git add tests/integration/challenges/current_score.json
            git commit -m "Update score"
            git checkout -b $current_score_branch

            echo ${{ secrets.PAT_REVIEW }} | gh auth login --with-token

            git remote add base https://github.com/${{ github.event.pull_request.base.repo.full_name }}.git

            git push base $current_score_branch
            echo "Base branch: ${{ github.event.pull_request.head.ref }}"

            pr_url=$(gh pr create --title "Update Score In Pull Request Number ${{ github.event.pull_request.number }}" \
            --head "${{ github.repository_owner }}:$current_score_branch" \
            --base "${{ github.event.pull_request.head.ref }}" \
            --body "This pull request updates the current score of Auto-GPT. Please check the files changed and merge the pull request." \
            --repo ${{ github.event.pull_request.head.repo.full_name }})
            
            echo "SCORE_CHANGED=true" >> $GITHUB_ENV
            echo "PR_URL=$pr_url" >> $GITHUB_ENV
          else
            echo "The current score didn't change."
          fi

      - name: Apply or remove behaviour change label and comment [PR event only]
        if: ${{ github.event_name == 'pull_request_target' }}
        run: |
          TOKEN=${{ secrets.PAT_REVIEW }}
          REPO=${{ github.repository }}
          echo $TOKEN | gh auth login --with-token
          COMMENT_BODY=""
          SCORE_CHANGED_MESSAGE="The score has been updated, please merge this pull request: ${{ env.PR_URL }}"

          if [[ "${{ env.CASSETTES_MODIFIED }}" == "true" ]]; then
            echo "Adding label and comment..."
            curl -X POST \
            -H "Authorization: Bearer $TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/$REPO/issues/${{ github.event.pull_request.number }}/labels \
            -d '{"labels":["behaviour change"]}'

            COMMENT_BODY="You changed AutoGPT's behaviour. The cassettes have been updated and will be merged to the submodule when this Pull Request gets merged."
          else
            echo "Removing label..."
            curl -X DELETE \
            -H "Authorization: Bearer $TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/$REPO/issues/${{ github.event.pull_request.number }}/labels/behaviour%20change
          fi

          if [[ "${{ env.SCORE_CHANGED }}" == "true" ]]; then
            if [ -z "$COMMENT_BODY" ]; then
              COMMENT_BODY=$SCORE_CHANGED_MESSAGE
            else
              COMMENT_BODY="$COMMENT_BODY \n\n $SCORE_CHANGED_MESSAGE"
            fi
          fi

          if [ ! -z "$COMMENT_BODY" ]; then
            gh api repos/$REPO/issues/${{ github.event.pull_request.number }}/comments -X POST -F body="$COMMENT_BODY"
          fi
      
