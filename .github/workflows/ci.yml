name: Python CI

on:
  push:
    branches: [ master, ci-test* ]
    paths-ignore:
      - 'tests/Auto-GPT-test-cassettes'
      - 'tests/challenges/current_score.json'
  pull_request:
    branches: [ stable, master ]
  pull_request_target:
    branches: [ master, ci-test* ]

concurrency:
  group: ${{ format('ci-{0}', github.head_ref && format('pr-{0}', github.event.pull_request.number) || github.sha) }}
  cancel-in-progress: ${{ startsWith(github.event_name, 'pull_request') && github.event.pull_request.head.repo.fork == (github.event_name == 'pull_request_target') }}

jobs:
  lint:
    # eliminate duplicate runs on master
    if: github.event_name == 'push' || github.base_ref != 'master' || (github.event.pull_request.head.repo.fork == (github.event_name == 'pull_request_target'))

    runs-on: ubuntu-latest
    env:
      min-python-version: "3.10"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}

      - name: Set up Python ${{ env.min-python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.min-python-version }}

      - id: get_date
        name: Get date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Set up Python dependency cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}-${{ steps.get_date.outputs.date }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint with flake8
        run: flake8

      - name: Check black formatting
        run: black . --check
        if: success() || failure()

      - name: Check isort formatting
        run: isort . --check
        if: success() || failure()

      - name: Check mypy formatting
        run: mypy
        if: success() || failure()

      - name: Check for unused imports and pass statements
        run: |
          cmd="autoflake --remove-all-unused-imports --recursive --ignore-init-module-imports autogpt tests"
          $cmd --check || (echo "You have unused imports or pass statements, please run '${cmd} --in-place'" && exit 1)

  test:
    # eliminate duplicate runs on master
    if: github.event_name == 'push' || github.base_ref != 'master' || (github.event.pull_request.head.repo.fork == (github.event_name == 'pull_request_target'))

    permissions:
      # Gives the action the necessary permissions for publishing new
      # comments in pull requests.
      pull-requests: write
      # Gives the action the necessary permissions for pushing data to the
      # python-coverage-comment-action branch, and for editing existing
      # comments (to avoid publishing multiple comments in the same PR)
      contents: write
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        python-version: ["3.10"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          submodules: true

      - name: Configure git user Auto-GPT-Bot
        run: |
          git config --global user.name "Auto-GPT-Bot"
          git config --global user.email "github-bot@agpt.co"

      - name: Checkout cassettes
        if: startsWith(github.event_name, 'pull_request')
        run: |
          cassette_branch="${{ github.event.pull_request.user.login }}-${{ github.event.pull_request.head.ref }}"
          cd tests/Auto-GPT-test-cassettes

          if git ls-remote --exit-code --heads origin $cassette_branch ; then
            git fetch origin $cassette_branch
            git fetch origin ${{ github.event.pull_request.base.ref }}

            git checkout $cassette_branch

            # Pick non-conflicting cassette updates from the base branch
            git merge --no-commit --strategy-option=ours origin/${{ github.event.pull_request.base.ref }}
            echo "Using cassettes from mirror branch '$cassette_branch'," \
              "synced to upstream branch '${{ github.event.pull_request.base.ref }}'."
          else
            git checkout -b $cassette_branch
            echo "Branch '$cassette_branch' does not exist in cassette submodule." \
              "Using cassettes from '${{ github.event.pull_request.base.ref }}'."
          fi

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - id: get_date
        name: Get date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Set up Python dependency cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}-${{ steps.get_date.outputs.date }}

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run pytest with coverage
        run: |
          pytest -n auto tests/challenges/basic_abilities/test_write_file.py tests/challenges/memory/test_memory_challenge_c.py --cov=autogpt --cov-branch --cov-report term-missing --cov-report xml
          python tests/challenges/utils/build_current_score.py
        env:
          CI: true
          PROXY: ${{ secrets.PROXY }}
          AGENT_MODE: ${{ vars.AGENT_MODE }}
          AGENT_TYPE: ${{ vars.AGENT_TYPE }}

      - id: get_cassettes_diff
        name: Detect if cassettes changed
        if: startsWith(github.event_name, 'pull_request')
        run: |
          cd tests/Auto-GPT-test-cassettes
          cassette_diff=$(git diff --name-only --diff-filter=M -- '**/*.yaml')
          
          if [ -n "$cassette_diff" ]; then
            echo "Cassettes changed: $cassette_diff"
            echo "cassettes_changed=true" >> $GITHUB_OUTPUT
          else
            echo "Cassettes did not change."
            echo "cassettes_changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Attempt to beat Challenges if cassettes changed
        if: startsWith(github.event_name, 'pull_request') && steps.get_cassettes_diff.outputs.cassettes_changed == 'true'
        run: |
          pytest -n auto tests/challenges/basic_abilities/test_write_file.py tests/challenges/memory/test_memory_challenge_c.py --beat-challenges --cov=autogpt --cov-branch --cov-report term-missing --cov-report xml
          python tests/challenges/utils/build_current_score.py
        env:
          CI: true
          PROXY: ${{ secrets.PROXY }}
          AGENT_MODE: ${{ vars.AGENT_MODE }}
          AGENT_TYPE: ${{ vars.AGENT_TYPE }}

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3

      - id: setup_git_auth
        name: Set up git token authentication
        # Cassettes may be pushed even when tests fail.
        if: always() && (startsWith(github.event_name, 'pull_request') || success())
        run: |
          config_key="http.${{ github.server_url }}/.extraheader"
          base64_pat=$(echo -n "pat:${{ secrets.PAT_REVIEW }}" | base64 -w0)

          git config "$config_key" \
            "Authorization: Basic $base64_pat"

          cd tests/Auto-GPT-test-cassettes
          git config "$config_key" \
            "Authorization: Basic $base64_pat"

          echo "config_key=$config_key" >> $GITHUB_OUTPUT

      - id: push_challenge_scores
        name: Push updated challenge scores
        run: |
          score_file="tests/challenges/current_score.json"

          if ! git diff --quiet $score_file; then
            git add $score_file
            git commit -m "Update challenge scores"
            if [ "${{ startsWith(github.event_name, 'pull_request') }}" = "true" ]; then
              updated_score_branch="update-score-${{ github.event.pull_request.number }}"
              git checkout -b $updated_score_branch
              git remote add base_repo \
                https://github.com/${{ github.event.pull_request.base.repo.owner.login }}/${{ github.event.pull_request.base.repo.name }}.git
              git push -f base_repo $updated_score_branch
              echo "updated_score_branch=$updated_score_branch" >> $GITHUB_OUTPUT
            else
              git push origin HEAD:${{ github.ref }}
            fi
          else
            echo "The challenge scores didn't change."
          fi

      - id: push_cassettes
        name: Push updated cassettes
        # For pull requests, push updated cassettes even when tests fail
        if: always() && (startsWith(github.event_name, 'pull_request') || success())
        run: |
          if [ "${{ startsWith(github.event_name, 'pull_request') }}" = "true" ]; then
            is_pull_request=true
            cassette_branch="${{ github.event.pull_request.user.login }}-${{ github.event.pull_request.head.ref }}"
          else
            cassette_branch="${{ github.ref_name }}"
          fi

          cd tests/Auto-GPT-test-cassettes
          # Commit & push changes to cassettes if any
          if ! git diff --quiet; then
            git add .
            git commit -m "Auto-update cassettes"
            git push origin HEAD:$cassette_branch
            if [ ! $is_pull_request ]; then
              cd ../..
              git add tests/Auto-GPT-test-cassettes
              git commit -m "Update cassette submodule"
              git push origin HEAD:$cassette_branch
            fi
          else
            echo "No cassette changes to commit"
          fi

      - name: Post Set up git token auth
        if: steps.setup_git_auth.outcome == 'success'
        run: |
          git config --unset-all '${{ steps.setup_git_auth.outputs.config_key }}'
          git submodule foreach git config --unset-all '${{ steps.setup_git_auth.outputs.config_key }}'
                    
          echo ${{ secrets.PAT_REVIEW }} | gh auth login --with-token

      - id: create_pr
        name: Create Pull Request if score changed, if not cleanup branch and PR
        if: startsWith(github.event_name, 'pull_request')
        run: |
          base_repo_owner=${{ github.event.pull_request.base.repo.owner.login }}
          base_repo_name=${{ github.event.pull_request.base.repo.name }}
          updated_score_branch=${{steps.push_challenge_scores.outputs.updated_score_branch}}
          
          pr_number=$(gh api repos/$base_repo_owner/$base_repo_name/pulls -q ".[] | select(.head.ref == \"$updated_score_branch\") | .number")
          
          if [ -z "$updated_score_branch" ]; then
            if [ -n "$pr_number" ]; then
              gh api -X PATCH repos/$base_repo_owner/$base_repo_name/pulls/$pr_number -f state=closed
              echo "Close PR $pr_number if not already closed"
            fi
            # Delete branch
            gh api -X DELETE repos/$base_repo_owner/$base_repo_name/git/refs/heads/$updated_score_branch \
              &&  echo "Branch $updated_score_branch deleted." \
              || echo "Branch $updated_score_branch not found or already deleted."
            echo "Score didn't change."
            exit 0
          fi
          
          if [ -z "$pr_number" ] || [ "$(gh api repos/$base_repo_owner/$base_repo_name/pulls/$pr_number --jq ".state")" = "closed" ]; then
            pr_url=$(gh pr create --title "Update Score In Pull Request Number ${{ github.event.pull_request.number }}" \
              --head "$base_repo_owner:$updated_score_branch" \
              --base "${{ github.event.pull_request.head.ref }}" \
              --body "This pull request updates the current score of Auto-GPT. Please check the files changed and merge the pull request." \
              --repo ${{ github.event.pull_request.head.repo.full_name }})
          else
            pr_url=$(gh pr view $pr_number --json url --jq '.url')
          fi
          
          echo "pr_url=$pr_url" >> $GITHUB_OUTPUT  

      - name: Apply "behaviour change" label and comment on PR
        if: startsWith(github.event_name, 'pull_request')
        run: |
          REPO=${{ github.repository }}
          COMMENT_BODY=""
          SCORE_CHANGED_MESSAGE="The pipeline will fail until you merge the updated score: ${{ steps.create_pr.outputs.pr_url }}"
          if [[ "${{ steps.get_cassettes_diff.outputs.cassettes_changed }}" == "true" ]]; then
            echo "Adding label and comment..."
            curl -X POST \
            -H "Authorization: Bearer ${{ secrets.PAT_REVIEW }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/$REPO/issues/${{ github.event.pull_request.number }}/labels \
            -d '{"labels":["behaviour change"]}'
            COMMENT_BODY="You changed AutoGPT's behaviour. The cassettes have been updated and will be merged to the submodule when this Pull Request gets merged. "
            echo "Added comment and label informing of cassette update."
          else
            echo "Cassettes did not change so no label or comment added."
          fi
          if [[ -n "${{ steps.create_pr.outputs.pr_url }}" ]]; then
            COMMENT_BODY="$COMMENT_BODY$SCORE_CHANGED_MESSAGE"
            echo "Added comment informing of Pull Request to update the challenge scores."
          else
            echo "Challenge scores did not change so no comment added."
          fi
          if [ ! -z "$COMMENT_BODY" ]; then
            gh api repos/$REPO/issues/${{ github.event.pull_request.number }}/comments -X POST -F body="$COMMENT_BODY"
          fi
          if [[ -n "${{ steps.create_pr.outputs.pr_url }}" ]]; then
            echo "$SCORE_CHANGED_MESSAGE"
            exit 1
          fi
