name: Python CI

on:
  push:
    branches: [ master, ci-test* ]
    paths-ignore:
      - 'tests/Auto-GPT-test-cassettes'
      - 'tests/integration/challenges/current_score.json'
  pull_request:
    branches: [ stable, master ]
  pull_request_target:
    branches: [ master, ci-test* ]

concurrency:
  group: ${{ format('ci-{0}', github.head_ref && format('pr-{0}', github.event.pull_request.number) || github.sha) }}
  cancel-in-progress: ${{ startsWith(github.event_name, 'pull_request') && github.event.pull_request.head.repo.fork == (github.event_name == 'pull_request_target') }}

jobs:
  lint:
    # eliminate duplicate runs on master
    if: github.event_name == 'push' || github.ref_name != 'master' || (github.event.pull_request.head.repo.fork == (github.event_name == 'pull_request_target'))

    runs-on: ubuntu-latest
    env:
      min-python-version: "3.10"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}

      - name: Set up Python ${{ env.min-python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.min-python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint with flake8
        run: flake8

      - name: Check black formatting
        run: black . --check
        if: success() || failure()

      - name: Check isort formatting
        run: isort . --check
        if: success() || failure()

      - name: Check mypy formatting
        run: mypy
        if: success() || failure()

      - name: Check for unused imports and pass statements
        run: |
          cmd="autoflake --remove-all-unused-imports --recursive --ignore-init-module-imports autogpt tests"
          $cmd --check || (echo "You have unused imports or pass statements, please run '${cmd} --in-place'" && exit 1)

  test:
    # eliminate duplicate runs on master
    if: github.event_name == 'push' || github.ref_name != 'master' || (github.event.pull_request.head.repo.fork == (github.event_name == 'pull_request_target'))

    permissions:
      # Gives the action the necessary permissions for publishing new
      # comments in pull requests.
      pull-requests: write
      # Gives the action the necessary permissions for pushing data to the
      # python-coverage-comment-action branch, and for editing existing
      # comments (to avoid publishing multiple comments in the same PR)
      contents: write
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        python-version: ["3.10"]

    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          submodules: true

      - name: Setup git username and email
        run: |
          git config --global user.name "Auto-GPT-Bot"
          git config --global user.email "github-bot@agpt.co"

      - name: Check out cassettes
        if: ${{ startsWith(github.event_name, 'pull_request') }}
        run: |
          cassette_branch="${{ github.event.pull_request.user.login }}-${{ github.event.pull_request.head.ref }}"
          cd tests/Auto-GPT-test-cassettes

          if git ls-remote --exit-code --heads origin $cassette_branch ; then
            git fetch origin $cassette_branch
            git fetch origin ${{ github.event.pull_request.base.ref }}

            git checkout $cassette_branch
            git merge --no-commit --strategy-option ours origin/${{ github.event.pull_request.base.ref }}
            echo "Using cassettes from mirror branch, synced to upstream branch '${{ github.event.pull_request.base.ref }}' if no conflicts."
          else
            git checkout -b $cassette_branch
            echo "Branch '$cassette_branch' does not exist in cassette submodule."\
              "Using cassettes from ${{ github.event.pull_request.base.ref }}."
          fi

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Run pytest tests with coverage
        run: |
          echo "test" >> tests/Auto-GPT-test-cassettes/test_write_file/test_write_file.yaml
          echo "test" >> tests/integration/challenges/current_score.json
        env:
          CI: true
          PROXY: ${{ secrets.PROXY }}
          AGENT_MODE: ${{ vars.AGENT_MODE }}
          AGENT_TYPE: ${{ vars.AGENT_TYPE }}

      - id: get_cassettes_diff
        name: Identify differences between cassettes of current PR and target branch
        if: ${{ startsWith(github.event_name, 'pull_request') }}
        run: |
          cd tests/Auto-GPT-test-cassettes
          cassette_diff=$(git diff --name-only --diff-filter=M -- '**/*.yaml')
      
          if [ -n "$cassette_diff" ]; then
            echo "updated=true" >> $GITHUB_OUTPUT
          fi

      - name: Attempt to beat Challenges if cassettes changed
        if: ${{ startsWith(github.event_name, 'pull_request') }} && "${{ steps.push_cassettes.outputs.updated }}" == "true"
        run: |
          echo "test" >> tests/Auto-GPT-test-cassettes/test_write_file/test_write_file.yaml
          echo "test" >> tests/integration/challenges/current_score.json
        env:
          CI: true
          PROXY: ${{ secrets.PROXY }}
          AGENT_MODE: ${{ vars.AGENT_MODE }}
          AGENT_TYPE: ${{ vars.AGENT_TYPE }}

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3

      - id: setup_git_auth
        name: Set up git token authentication
        run: |
          config_key="http.${{ github.server_url }}/.extraheader"
          base64_pat=$(echo -n "pat:${{ secrets.PAT_REVIEW }}" | base64 -w0)

          git config "$config_key" \
            "Authorization: Basic $base64_pat"

          cd tests/Auto-GPT-test-cassettes
          git config "$config_key" \
            "Authorization: Basic $base64_pat"

          echo "config_key=$config_key" >> $GITHUB_OUTPUT

      - name: Push updated challenge scores
        if: github.event_name == 'push'
        run: |
          score_file="tests/integration/challenges/current_score.json"

          if ! git diff --quiet $score_file; then
            git add $score_file
            git commit -m "Update challenge scores"
            git push origin HEAD:${{ github.ref }}
          else
            echo "The challenge scores didn't change."
          fi

      - name: Push updated cassettes
        run: |
          if [ "${{ startsWith(github.event_name, 'pull_request') }}" = "true" ]; then
            is_pull_request=true
            cassette_branch="${{ github.event.pull_request.user.login }}-${{ github.event.pull_request.head.ref }}"
          else
            current_branch=$(echo ${{ github.ref }} | sed -e "s/refs\/heads\///g")
            cassette_branch=$current_branch
          fi

          cd tests/Auto-GPT-test-cassettes

          # Commit & push changes to cassettes if any
          if ! git diff --quiet; then
            git add .
            git commit -m "Auto-update cassettes"

            if [ $is_pull_request ]; then
              git push -f origin $cassette_branch
            else
              git pull --rebase origin $cassette_branch
              git push origin HEAD:$cassette_branch
              cd ../..
              git add tests/Auto-GPT-test-cassettes
              git commit -m "Update cassette submodule"
              git push origin HEAD:$current_branch
            fi
          else
            echo "No cassette changes to commit"
          fi

      - id: create_pr
        name: Create Pull Request if score changed
        if: ${{ startsWith(github.event_name, 'pull_request') }}
        run: |
          base_repo_owner=${{ github.event.pull_request.base.repo.owner.login }}
          base_repo_name=${{ github.event.pull_request.base.repo.name }}
          updated_score_branch="update-score-${{ github.event.pull_request.number }}-$(date +'%Y%m%d%H%M%S')"
          
          if ! git diff --quiet -- tests/integration/challenges/current_score.json; then          
            git add tests/integration/challenges/current_score.json
            git commit -m "Update score"
            git checkout -b $updated_score_branch
            
            git remote add base_repo https://github.com/$base_repo_owner/$base_repo_name.git
            echo ${{ secrets.PAT_REVIEW }} | gh auth login --with-token
            branches_to_delete=$(gh api repos/$base_repo_owner/$base_repo_name/git/refs --jq ".[] | select(.ref | startswith(\"refs/heads/update-score-${{ github.event.pull_request.number }}\")) | .ref")
            
            if [ ! -z "$branches_to_delete" ]; then
              for branch in $branches_to_delete
              do
                branch_short=${branch#refs/heads/}
                prs=$(gh api repos/${{ github.repository }}/pulls -q ".[] | select(.head.ref == \"$branch_short\") | .number")
              
                # iterate through all previous PRs created, close them and delete the branch
                for pr in $prs
                do
                  gh api repos/${{ github.repository }}/pulls/$pr -X PATCH -F state="closed"
                done
                gh api -X DELETE /repos/$base_repo_owner/$base_repo_name/git/$branch
              done
            else
              echo "No matching branches found to delete."
            fi
            
            git push base_repo $updated_score_branch
            
            pr_url=$(gh pr create --title "Update Score In Pull Request Number ${{ github.event.pull_request.number }}" \
            --head "$base_repo_owner:$updated_score_branch" \
            --base "${{ github.event.pull_request.head.ref }}" \
            --body "This pull request updates the current score of Auto-GPT. Please check the files changed and merge the pull request." \
            --repo ${{ github.event.pull_request.head.repo.full_name }})
            
            echo "pr_url=$pr_url" >> $GITHUB_OUTPUT
          else
            echo "The current score didn't change."
          fi



      - name: Post Set up git token auth
        if: steps.setup_git_auth.outcome == 'success'
        run: |
          git config --unset-all '${{ steps.setup_git_auth.outputs.config_key }}'
          git submodule foreach git config --unset-all '${{ steps.setup_git_auth.outputs.config_key }}'

      - name: Apply or remove behaviour change label and comment
        if: ${{ startsWith(github.event_name, 'pull_request') }}
        run: |
          TOKEN=${{ secrets.PAT_REVIEW }}
          REPO=${{ github.repository }}
          echo $TOKEN | gh auth login --with-token
          COMMENT_BODY=""
          SCORE_CHANGED_MESSAGE="The pipeline will fail until you merge the updated score: ${{ steps.get_cassettes_diff.outputs.pr_url }}"
          
          if [[ "${{ steps.push_cassettes.outputs.updated }}" == "true" ]]; then
            echo "Adding label and comment..."
            curl -X POST \
            -H "Authorization: Bearer $TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/$REPO/issues/${{ github.event.pull_request.number }}/labels \
            -d '{"labels":["behaviour change"]}'
          
            COMMENT_BODY="You changed AutoGPT's behaviour. The cassettes have been updated and will be merged to the submodule when this Pull Request gets merged. "
          fi
          
          if ${{ steps.get_cassettes_diff.outputs.pr_url }}; then
            COMMENT_BODY="$COMMENT_BODY$SCORE_CHANGED_MESSAGE"
          fi
          
          if [ ! -z "$COMMENT_BODY" ]; then
            gh api repos/$REPO/issues/${{ github.event.pull_request.number }}/comments -X POST -F body="$COMMENT_BODY"
          fi
          
          if ${{ steps.get_cassettes_diff.outputs.pr_url }}; then
            echo "$SCORE_CHANGED_MESSAGE"
            exit 1
          fi
