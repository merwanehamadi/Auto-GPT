name: Python CI

on:
  push:
    branches: [ master ]
  pull_request_target:
    types: [ opened, synchronize ]

concurrency:
  group: ${{ format('ci-{0}', github.head_ref && format('pr-{0}', github.event.pull_request.number) || github.sha) }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  test:
    permissions:
      pull-requests: write
      contents: write
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ "3.10", "3.11" ]

    steps:
      - name: Check out pull request HEAD
        if: ${{ github.event_name == 'pull_request_target' }}
        uses: actions/checkout@v3


      - name: Run unittest tests with coverage
        run: |
          echo "benchfdsmarks" > xfail_reasons.log
        env:
          CI: true

      - name: Check added files for cassettes and set output
        if: ${{ github.event_name == 'pull_request_target' }}
        id: check_cassettes
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          FILES_URL="https://api.github.com/repos/${{ github.repository }}/pulls/${PR_NUMBER}/files"
          FILES_JSON=$(curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" $FILES_URL)
          echo "FILES_JSON: $FILES_JSON"
          ADDED_FILES=$(echo "$FILES_JSON" | jq -r '.[] | select(.status == "added") | .filename')
          echo "ADDED_FILES: $ADDED_FILES"
          if echo "$ADDED_FILES" | grep 'cassettes'; then
            echo "::set-output name=found_cassettes::true"
          else
            echo "::set-output name=found_cassettes::false"
          fi

      - name: Check xfail_reasons.log for benchmarks or cassettes and post a comment
        if: ${{ github.event_name == 'pull_request_target' && (steps.check_cassettes.outputs.found_cassettes == 'true' || contains(readFile('xfail_reasons.log'), 'benchmarks')) }}
        run: |
          echo "Found cassettes: ${steps.check_cassettes.outputs.found_cassettes}"
          echo "xfail_reasons.log content: $(cat xfail_reasons.log)"
          PR_COMMENT="We will run the benchmarks soon..."
          PR_NUMBER=${{ github.event.pull_request.number }}
          PR_URL="https://api.github.com/repos/${{ github.repository }}/issues/${PR_NUMBER}/comments"
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{\"body\": \"$PR_COMMENT\"}" \
            $PR_URL
